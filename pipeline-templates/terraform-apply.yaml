jobs:
  - deployment: Deploy
    pool:
      vmImage: ${{ parameters.agentPool }}
    environment: ${{ parameters.environment }}
    strategy:
      # default deployment strategy
      runOnce:
        deploy:
          steps:
            - download: current
              displayName: 'Download artifacts'
              artifact: drop
            - download: current
              displayName: 'Download tfplan'
              artifact: ${{ parameters.environment }}${{ parameters.build }}plan
            - task: InstallSSHKey@0
              displayName: 'Install SSH Key'
              inputs:
                hostName: 'github.com'
                sshPublicKey: 'not required'
                sshKeySecureFile: 'jenkins_ssh_pk'
            - task: CopyFiles@2
              inputs:
                sourceFolder: '$(Pipeline.Workspace)/${{ parameters.environment }}${{ parameters.build }}plan'
                targetFolder: '$(Pipeline.Workspace)/drop/'
            - task: TerraformInstaller@0
              inputs:
                terraformVersion: ${{ parameters.terraformVersion }}
            - task: TerraformCLI@0
              displayName: Init - ${{ parameters.environment }}
              inputs:
                command: 'init'
                backendType: 'azurerm'
                ensureBackend: true
                backendServiceArm: '${{ parameters.service_connection }}'
                backendAzureRmResourceGroupName: '${{ parameters.storage_account_rg }}'
                backendAzureRmStorageAccountName: '${{ parameters.storage_account_name }}'
                backendAzureRmResourceGroupLocation: 'uksouth'
                backendAzureRmContainerName: 'mgmtstatestorecontainer${{ parameters.environment }}'
                backendAzureRmKey: 'core-infra/${{ parameters.environment }}/terraform.tfstate'
                workingDirectory: '$(Pipeline.Workspace)/drop/'
              continueOnError: true
            - task: TerraformCLI@0
              displayName: Apply - ${{ parameters.environment }}
              inputs:
                command: 'apply'
                commandOptions: '${{ parameters.environment }}${{ parameters.build }}plan'
                environmentServiceName: '${{ parameters.service_connection }}'
                workingDirectory: '$(Pipeline.Workspace)/drop/'